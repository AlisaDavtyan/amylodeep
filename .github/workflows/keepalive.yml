name: AmyloDeep Keep-Alive
on:
  schedule:
    # Fixed cron syntax - every 50 minutes
    - cron: "*/50 * * * *"
  workflow_dispatch:

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    timeout-minutes: 8  # Increased timeout
    concurrency:
      group: amylodeep-keepalive
      cancel-in-progress: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
            
      - name: Install dependencies
        run: |
          npm init -y
          npm install playwright@latest
          
      - name: Install Playwright browsers (with cache)
        run: |
          if [ "${{ steps.playwright-cache.outputs.cache-hit }}" != "true" ]; then
            echo "Installing Playwright browsers..."
            npx playwright install --with-deps chromium
          else
            echo "Using cached Playwright browsers"
            # Verify chromium is available
            npx playwright install chromium --dry-run || npx playwright install chromium
          fi
          
      - name: Create optimized keepalive script
        run: |
          cat > keepalive.js <<'EOF'
          const { chromium } = require('playwright');
          
          (async () => {
            const url = process.env.APP_URL || "https://amylodeep.streamlit.app/?keepalive=1";
            console.log(`üöÄ Starting keep-alive for: ${url}`);
            
            const browser = await chromium.launch({ 
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--no-first-run',
                '--no-default-browser-check',
                '--disable-default-apps'
              ]
            });
            
            const context = await browser.newContext({
              userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122 Safari/537.36",
              viewport: { width: 1280, height: 800 },
              ignoreHTTPSErrors: true
            });
            
            const page = await context.newPage();
            
            try {
              console.log("üì° Navigating to app...");
              await page.goto(url, { 
                waitUntil: "domcontentloaded", 
                timeout: 60000 // Reduced timeout
              });
              
              console.log("‚è≥ Waiting for app to stabilize...");
              // Wait for Streamlit to load
              try {
                await page.waitForLoadState("networkidle", { timeout: 30000 });
              } catch (e) {
                console.log("‚ö†Ô∏è Network didn't idle, but continuing...");
              }
              
              // Optional: Wait for specific Streamlit elements
              try {
                await page.waitForSelector('[data-testid="stApp"]', { timeout: 10000 });
                console.log("‚úÖ Streamlit app detected");
              } catch (e) {
                console.log("‚ö†Ô∏è Streamlit app selector not found, but continuing...");
              }
              
              // Keep session alive
              console.log("üîÑ Keeping session alive for 30 seconds...");
              await page.waitForTimeout(30000); // Reduced from 40s
              
              console.log("‚úÖ Keep-alive visit completed successfully");
              
            } catch (error) {
              console.error("‚ùå Error during keep-alive:", error.message);
              throw error;
            } finally {
              await browser.close();
            }
          })().catch(err => {
            console.error("‚ùå Keep-alive failed:", err);
            process.exit(1);
          });
          EOF
          
      - name: Run keepalive
        env:
          APP_URL: https://amylodeep.streamlit.app/?skip_splash=1
        run: node keepalive.js
