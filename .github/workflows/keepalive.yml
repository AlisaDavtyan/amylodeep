name: AmyloDeep Keep-Alive

on:
  schedule:
    - cron: "0 */6 * * *"   # every 6 hours
  workflow_dispatch:

jobs:
  probe:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Use Playwright's official action (auto-installs browsers)
        uses: microsoft/playwright-github-action@v1

      - name: Run wake/probe script
        run: |
          node - <<'JS'
          const { chromium, devices } = require('playwright');

          const URL = "https://amylodeep.streamlit.app/";

          const wait = (ms) => new Promise(r => setTimeout(r, ms));

          (async () => {
            const browser = await chromium.launch({ headless: true });
            const context = await browser.newContext({
              ...devices['Desktop Chrome'],
              userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/124 Safari/537.36'
            });
            const page = await context.newPage();

            try {
              console.log("‚Ü™Ô∏è opening", URL);
              await page.goto(URL, { waitUntil: 'domcontentloaded', timeout: 120000 });

              // If the Cloud "app is sleeping" interstitial is shown, click the wake button
              // The text can change slightly, so match loosely by role & regex.
              const wakeButton = page.getByRole('button', { name: /get this app back up/i });
              if (await wakeButton.isVisible().catch(() => false)) {
                console.log("üò¥ sleeping screen detected ‚Üí clicking wake");
                await wakeButton.click();
                // give Streamlit container time to boot
                await wait(45000);
              }

              // Wait for the Streamlit app shell to be ready
              await page.waitForSelector('[data-testid="stApp"]', { timeout: 120000 });

              // Streamlit needs a real, interactive session (WebSocket + UI activity).
              // Interact with your form: textarea ‚Üí slider ‚Üí Predict.
              // Your textarea has no label text, so use ARIA role "textbox".
              const textbox = page.getByRole('textbox').first();
              await textbox.waitFor({ state: 'visible', timeout: 30000 });
              await textbox.fill('ACDEFGHIKLMNPQRSTVWYACDEFGHIKLMNPQRSTVWY');
              await wait(500);

              // Slider (window size). Use the first range input; your app has one.
              const slider = page.locator('input[type="range"]');
              if (await slider.first().isVisible().catch(() => false)) {
                await slider.first().evaluate(el => {
                  el.value = 12;
                  el.dispatchEvent(new Event('input', { bubbles: true }));
                  el.dispatchEvent(new Event('change', { bubbles: true }));
                });
              }

              // Submit the form: the Streamlit form submit is a real <button>
              const predict = page.getByRole('button', { name: /^predict$/i });
              await predict.click();

              // Wait for any result UI that indicates a run completed.
              await page.waitForSelector('text=Position-wise Probabilities', { timeout: 60000 }).catch(() => {});
              // keep the WS open briefly to look like a human session
              await wait(10000);

              console.log("‚úÖ probe finished ok");
            } catch (e) {
              console.error("‚ùå probe failed:", e.message);
              try {
                await page.screenshot({ path: 'debug-screenshot.png', fullPage: true });
                console.log("üì∏ saved debug-screenshot.png");
              } catch {}
              process.exit(1);
            } finally {
              await browser.close();
            }
          })();
          JS
      - name: Upload screenshot if failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: keep-alive-debug
          path: debug-screenshot.png
          if-no-files-found: ignore
