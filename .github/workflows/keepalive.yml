name: Simple Streamlit Interaction

on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:

jobs:
  interact:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Install Playwright
      run: |
        npm init -y
        npm i playwright
        npx playwright install --with-deps chromium

    - name: Simple App Interaction
      run: |
        node - <<'JS'
        const {chromium} = require('playwright');

        (async () => {
          const browser = await chromium.launch({headless: true});
          const page = await browser.newPage();
          
          try {
            console.log("üåê Loading app...");
            await page.goto("https://amylodeep.streamlit.app/", {timeout: 90000});
            
            // Wait a bit for any initial loading
            await page.waitForTimeout(10000);
            
            // Check if app is sleeping
            try {
              const wakeButton = await page.waitForSelector('text="Yes, get this app back up!"', {timeout: 5000});
              if (wakeButton) {
                console.log("üò¥ App is sleeping, waking it up...");
                await wakeButton.click();
                await page.waitForTimeout(30000);
              }
            } catch (e) {
              console.log("‚úÖ App is not sleeping");
            }
            
            // Wait for page to be ready (look for any textarea)
            console.log("üîç Waiting for form elements...");
            await page.waitForSelector('textarea', {timeout: 60000});
            
            // Fill the first textarea (should be your sequence input)
            console.log("üìù Filling sequence...");
            await page.fill('textarea', 'ACDEFGHIKLMNPQRSTVWYACDEFGHIKLMNPQRSTVWY');
            
            // Wait a moment
            await page.waitForTimeout(2000);
            
            // Look for predict button (try different approaches)
            console.log("üîç Looking for Predict button...");
            let predictClicked = false;
            
            // Try method 1: exact text match
            try {
              await page.click('button:has-text("Predict")');
              predictClicked = true;
              console.log("‚úÖ Clicked Predict button (method 1)");
            } catch (e) {
              console.log("‚ùå Method 1 failed, trying method 2...");
            }
            
            // Try method 2: any button with "predict" (case insensitive)
            if (!predictClicked) {
              try {
                const buttons = await page.$$('button');
                for (let button of buttons) {
                  const text = await button.textContent();
                  if (text && text.toLowerCase().includes('predict')) {
                    await button.click();
                    predictClicked = true;
                    console.log(`‚úÖ Clicked button with text: "${text}"`);
                    break;
                  }
                }
              } catch (e) {
                console.log("‚ùå Method 2 also failed");
              }
            }
            
            if (predictClicked) {
              console.log("‚è≥ Waiting for results...");
              await page.waitForTimeout(15000);
              console.log("‚úÖ Prediction process completed");
            } else {
              console.log("‚ö†Ô∏è Could not find Predict button, but form was filled");
            }
            
            // Keep the session alive
            console.log("üîó Keeping session alive...");
            await page.waitForTimeout(20000);
            
            console.log("üéâ Interaction completed successfully!");
            
          } catch (error) {
            console.error("‚ùå Error:", error.message);
            
            // Get page content for debugging
            const url = await page.url();
            console.log("Current URL:", url);
            
            if (url.includes('streamlit')) {
              console.log("‚úÖ At least we reached Streamlit");
            } else {
              throw error;
            }
          } finally {
            await browser.close();
          }
        })();
        JS