name: AmyloDeep Keep-Alive Python

on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:

jobs:
  interact:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium webdriver-manager

    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser

    - name: Interact with AmyloDeep App
      run: |
        python - <<'EOF'
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from selenium.webdriver.chrome.options import Options
        import time

        # Set up Chrome options
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1200,800")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

        # Initialize the driver
        driver = webdriver.Chrome(options=chrome_options)

        try:
            print("🌐 Loading AmyloDeep app...")
            driver.get("https://amylodeep.streamlit.app/")
            
            # Wait for page to load
            WebDriverWait(driver, 60).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            print("✅ Page loaded successfully")

            # Check if app is sleeping
            try:
                wake_button = WebDriverWait(driver, 8).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Yes, get this app back up!')]"))
                )
                print("😴 App is sleeping, clicking wake-up button...")
                wake_button.click()
                print("⏳ Waiting for app to wake up (45 seconds)...")
                time.sleep(45)
                print("✅ Wake-up wait completed")
            except:
                print("✅ App is not sleeping")

            # Wait for Streamlit to be ready
            print("⏳ Waiting for Streamlit to be ready...")
            time.sleep(10)

            # Find the textarea
            print("🔍 Looking for sequence input textarea...")
            try:
                # Try to find by key attribute
                textarea = driver.find_element(By.CSS_SELECTOR, "textarea[key='sequence_input']")
            except:
                try:
                    # Try to find by label text
                    label = driver.find_element(By.XPATH, "//div[contains(text(), 'Paste amino acid sequence:')]")
                    # Find the nearest textarea
                    textarea = label.find_element(By.XPATH, "./following::textarea")
                except:
                    # Fallback to any textarea
                    textarea = driver.find_element(By.TAG_NAME, "textarea")
            
            print("✅ Found textarea")

            # Fill the textarea
            print("📝 Filling sequence input...")
            test_sequence = "ACDEFGHIKLMNPQRSTVWYACDEFGHIKLMNPQRSTVWY"
            textarea.clear()
            textarea.send_keys(test_sequence)
            print(f"✅ Filled sequence: {test_sequence}")
            time.sleep(2)

            # Find and click the Predict button
            print("🔍 Looking for Predict button...")
            try:
                predict_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Predict')]")
                print("✅ Found Predict button")
                
                print("🖱️ Clicking Predict button...")
                predict_button.click()
                print("✅ Predict button clicked")
                
                # Wait for results
                print("⏳ Waiting for prediction to complete...")
                time.sleep(30)
                
                # Check if results are visible
                try:
                    results = driver.find_element(By.XPATH, "//h5[contains(text(), 'Position-wise Probabilities')]")
                    print("✅ Prediction completed successfully")
                except:
                    print("⚠️ Results not found, but interaction completed")
                
            except:
                print("❌ Could not find Predict button")

            # Keep connection alive
            print("🔗 Keeping connection alive for 30 seconds...")
            time.sleep(30)
            print("🎉 AmyloDeep interaction completed successfully!")

        except Exception as e:
            print(f"❌ Error during interaction: {str(e)}")
            # Take screenshot for debugging
            driver.save_screenshot('debug-screenshot.png')
            print("📸 Screenshot saved for debugging")
            
        finally:
            driver.quit()
            print("🔚 Browser closed")
        EOF
