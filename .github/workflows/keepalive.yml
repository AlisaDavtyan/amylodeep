name: Keep Streamlit Awake (with interaction)

on:
  schedule:
    - cron: "0 */6 * * *"       
  workflow_dispatch:

jobs:
  wake:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Playwright (Chromium)
        run: |
          npm init -y
          npm i playwright
          npx playwright install --with-deps chromium

      - name: Visit app, paste sequence, click Predict
        env:
          URL: "https://amylodeep.streamlit.app/"
        run: |
          node - <<'JS'
          const {chromium} = require('playwright');
          const fs = require('fs');

          async function saveDiagnostics(page, prefix="debug"){
            try {
              await page.screenshot({path: `${prefix}.png`, fullPage: true});
              const html = await page.content();
              fs.writeFileSync(`${prefix}.html`, html);
              console.log("Saved diagnostics:", `${prefix}.png`, `${prefix}.html`);
            } catch(e) {
              console.log("Failed to save diagnostics:", e);
            }
          }

          (async () => {
            const browser = await chromium.launch({headless: true});
            const context = await browser.newContext();
            const page = await context.newPage();

            const url = process.env.URL;
            console.log("Visiting:", url);
            // Give plenty of time for first load / cold start
            await page.goto(url, {waitUntil: "networkidle", timeout: 180000});

            // Ensure Streamlit app container is present
            await page.waitForSelector('[data-testid="stAppViewContainer"]', {timeout: 120000});

            // Prefer Streamlit's textarea test-id; fall back if needed
            let textarea = page.locator('[data-testid="stTextArea"] textarea').first();
            try {
              await textarea.waitFor({state: "visible", timeout: 30000});
            } catch {
              console.log("Primary selector not visible yet, trying fallbacks…");
              textarea = page.locator('textarea, [role="textbox"], [contenteditable="true"]').first();
              await textarea.waitFor({state: "visible", timeout: 60000});
            }

            // Fill a valid amino-acid sequence
            const seq = "ACDEFGHIKLMNPQRSTVWYACDEFGHIKLMNPQRSTVWY";
            await textarea.fill(seq);

            // Click the Predict button by accessible name
            await page.getByRole("button", { name: "Predict" }).click();

            // Wait for your results section to appear
            await page.getByText("Position-wise Probabilities", { exact: false }).waitFor({ timeout: 120000 });

            // Keep page alive briefly so websocket stays active and app warms up
            await page.waitForTimeout(10000);

            console.log("Interaction complete ✅");
            await browser.close();
          })().catch(async (err) => {
            console.error("Playwright error:", err);
            process.exit(1);
          });
          JS

      - name: Upload diagnostics (screenshots, HTML) on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-diagnostics
          path: |
            debug.png
            debug.html
